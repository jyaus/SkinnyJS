//
// LESS mixins
//

//
// rounded corners
// (IE <=8 will gracefully degrade to square corners)
//
.rounded(@radius: 4px) 
{
  -webkit-border-radius: @radius;
  -moz-border-radius:    @radius;
  border-radius:         @radius;
  .background-clip();
}
.border-radius(@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0)  // use .rounded (above) unless you need this level of precision
{
  .border-radius-top-right(@topright);
  .border-radius-bottom-right(@bottomright);
  .border-radius-bottom-left(@bottomleft);
  .border-radius-top-left(@topleft);
  .background-clip();
}
.border-radius-top-right(@radius: 4px) // use .rounded (above) unless you need this level of precision
{
  -webkit-border-top-right-radius: @radius;
  -moz-border-radius-topright: @radius;
  border-top-right-radius: @radius;
}
.border-top-right-radius(@radius: 4px) // alternate syntax
{
	.border-radius-top-right(@radius);
}
.border-radius-bottom-right(@radius: 4px) // use .rounded (above) unless you need this level of precision
{
  -webkit-border-bottom-right-radius: @radius;
  -moz-border-radius-bottomright: @radius;
  border-bottom-right-radius: @radius;
}
.border-bottom-right-radius(@radius: 4px) // alternate syntax
{
	.border-radius-bottom-right(@radius);
}
.border-radius-bottom-left(@radius: 4px) // use .rounded (above) unless you need this level of precision
{
  -webkit-border-bottom-left-radius: @radius;
  -moz-border-radius-bottomleft: @radius;
  border-bottom-left-radius: @radius;
}
.border-bottom-left-radius(@radius: 4px) // alternate syntax
{
	.border-radius-bottom-left(@radius);
}
.border-radius-top-left(@radius: 4px) // use .rounded (above) unless you need this level of precision
{
  -webkit-border-top-left-radius: @radius;
  -moz-border-radius-topleft: @radius;
  border-top-left-radius: @radius;
}
.border-top-left-radius(@radius: 4px) // alternate syntax
{
	.border-radius-top-left(@radius);
}


//
// opacity
//
.opacity(@opacity: 0.5) 
{
  @filteropacity: @opacity * 100;
  filter: ~"alpha(opacity=@{filteropacity})"; // for IE<=-8
  opacity:         @opacity;
}

//
// shadows
// (IE <=8 will gracefully degrade to no shadow)
//
.drop-shadow(@x-axis: 4px, @y-axis: 4px, @blur: 4px, @alpha: 0.4) 
{ 
  -webkit-box-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  box-shadow:         @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
}
.drop-shadow(@x-axis: 4px, @y-axis: 4px, @blur: 4px, @spread: 1px, @alpha: 0.4) // for shadows that need the spread property
{ 
  -webkit-box-shadow: @x-axis @y-axis @blur @spread rgba(0, 0, 0, @alpha);
  box-shadow:         @x-axis @y-axis @blur @spread rgba(0, 0, 0, @alpha);
}
.inner-shadow(@x-axis:0, @y-axis:1px, @blur:2px, @alpha: 0.4) 
{
  -webkit-box-shadow: inset @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  box-shadow:         inset @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
}
.inner-shadow(@x-axis:0, @y-axis:1px, @blur:2px, @spread: 1px, @alpha: 0.4) // for shadows that need the spread property
{
  -webkit-box-shadow: inset @x-axis @y-axis @blur @spread rgba(0, 0, 0, @alpha);
  box-shadow:         inset @x-axis @y-axis @blur @spread rgba(0, 0, 0, @alpha);
}
.box-shadow(@arguments)  // use .drop-shadow or .inner-shadow (above) instead unless you need this level of precision
{ 
  -webkit-box-shadow: @arguments;
  box-shadow:         @arguments;
}
.box-shadow(@arguments1, @arguments2)  // for specifying two shadows on the same element
{ 
  -webkit-box-shadow: @arguments1, @arguments2;
  box-shadow:         @arguments1, @arguments2;
}
.box-shadow(@arguments1, @arguments2, @arguments3)  // for specifying three shadows on the same element
{ 
  -webkit-box-shadow: @arguments1, @arguments2, @arguments3;
  box-shadow:         @arguments1, @arguments2, @arguments3;
}
.drop-shadow-none()
{
	-webkit-box-shadow: none;
	box-shadow:         none;
}
.box-shadow-none()
{
	.drop-shadow-none;
}
.text-shadow-black(@x-axis: 0px, @y-axis: 1px, @blur: 1px, @alpha: 0.4) 
{ 
  -webkit-text-shadow: @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
  text-shadow:         @x-axis @y-axis @blur rgba(0, 0, 0, @alpha);
}
.text-shadow-white(@x-axis: 0px, @y-axis: 1px, @blur: 1px, @alpha: 0.4) 
{ 
  -webkit-text-shadow: @x-axis @y-axis @blur rgba(255, 255, 255, @alpha);
  text-shadow:         @x-axis @y-axis @blur rgba(255, 255, 255, @alpha);
}
.text-shadow(@x-axis: 0px, @y-axis: 1px, @blur: 1px, @color) // if the shadow is black or white, use .text-shadow-black or .text-shadow-white instead
{
  -webkit-text-shadow: @x-axis @y-axis @blur @color;
  text-shadow:         @x-axis @y-axis @blur @color;
}
.text-shadow-none() 
{
  -webkit-text-shadow: none;
  text-shadow:         none;
}

//
// standard 1-pixel border around an element.
// default color is our standard border color
//
.bordered(@top-color: @border-color, @right-color: @border-color, @bottom-color: @border-color, @left-color: @border-color) 
{  
  border-top: solid 1px @top-color;
  border-left: solid 1px @left-color;
  border-right: solid 1px @right-color;
  border-bottom: solid 1px @bottom-color;
}


//
// vertical linear gradients
// (older IE will gracefully degrade to a flat color)
// @color: fallback flat color (for IE <=9)
// @start: color at the top of the gradient
// @stop:  color at the bottom of the gradient
//
.gradient(@color: #a0a0a0, @start: #8e8e8e, @stop: #b3b3b3) 
{
  background: @color; 
  background: -webkit-gradient(linear,
                               left top,
                               left bottom,
                               color-stop(0, @start),
                               color-stop(1, @stop));
  background: -webkit-linear-gradient(top,
                                  @start,
                                  @stop);
  background: -moz-linear-gradient(center top,
                                   @start 0%,
                                   @stop 100%);
  background: -ms-linear-gradient(top,
                                  @start,
                                  @stop);
  background: linear-gradient(to bottom,
                                  @start,
                                  @stop);							   
}
// gradient with background image on top of it
.gradient-and-image(@color: #a0a0a0, @start: #8e8e8e, @stop: #b3b3b3, @imageurl: none) 
{
  background-color: @color; 
  background-repeat: no-repeat;
  background-image: e(%("url(%s)", @imageurl)), -webkit-gradient(linear,
                               left top,
                               left bottom,
                               color-stop(0, @start),
                               color-stop(1, @stop));
  background-image: e(%("url(%s)", @imageurl)), -webkit-linear-gradient(top,
                                  @start,
                                  @stop);
  background-image: e(%("url(%s)", @imageurl)), -moz-linear-gradient(center top,
                                   @start 0%,
                                   @stop 100%);
  background-image: e(%("url(%s)", @imageurl)), -ms-linear-gradient(top,
                                  @start,
                                  @stop);
  background-image: e(%("url(%s)", @imageurl)), linear-gradient(to bottom,
                                  @start,
                                  @stop);							   
  .ie9 &
  {
	background-color: @color; 
	background-image: e(%("url(%s)", @imageurl));
  }
}

//
// backgrounds
// note: this provides NO graceful degradation for IE<=8!
//
.background-size(@value) 
{
	-webkit-background-size: @value;
	-moz-background-size:    @value;
	background-size:         @value;
}
.background-clip(@argument: padding-box) 
{
  -webkit-background-clip: @argument;
  -moz-background-clip:    @argument; // this will produce incorrect FF syntax. Once our version of LESS supports JS evalution, this should be changed to strip "-box" from the end of the argument
  background-clip:         @argument;
}


//
// box-sizing
//
.box-sizing(@value)
{
	-webkit-box-sizing:	@value;
	-moz-box-sizing:	@value;
	-ms-box-sizing:		@value;
	box-sizing:		@value;
}


//
// clearfix
// Adding this mixin to an element's selector will produce the same result as putting class "clearfix" on the element.
// So you can add this mixin to the element's CSS rather than modifying your DOM to add the clearfix class.
//
.clearfix()
{
	&:before,
	&:after
	{
		content: ".";
		display: block;    
		height: 0;    
		overflow: hidden;	
	}
	&:after
	{
		clear: both;
	}	
}


//
// CSS3 transforms and animations
// note: there is no support or backfill for IE<=8!
// If you use these mixins, you will need to develop an alternate treatment for IE<=8.
//
.transform(@arguments) 
{
  -webkit-transform: @arguments;
  -moz-transform:    @arguments;
  -ms-transform:     @arguments;
  transform:         @arguments;
}
.rotate(@deg:90deg)
{
  .transform(rotate(@deg));
   -webkit-backface-visibility: hidden; // Google Chrome does not enable anti-aliasing by default when rotating. This forces it
}
.scale(@ratio:1.5)
{
  .transform(scale(@ratio));
}
.translate(@x:0, @y:0) 
{
  .transform(translate(@x, @y));
}
.transform-origin (@x:center, @y:center) 
{
  -webkit-transform-origin: @x @y;
  -moz-transform-origin:    @x @y;
  -ms-transform-origin:     @x @y;
}
.transform-style(@value)
{
  -webkit-transform-style: @value;
  -moz-transform-style: @value;
  transform-style: @value;
}
.perspective(@value)
{
  -webkit-perspective: @value;
  perspective: @value;
}

.animation(@name, @duration: 300ms, @delay: 0, @ease: ease) 
{
  -webkit-animation: @name @duration @delay @ease;
  -moz-animation:    @name @duration @delay @ease;
  -ms-animation:     @name @duration @delay @ease;
}
.transition(@value)
{
	-webkit-transition: @value;
	-moz-transition:    @value;
	transition:         @value;
}
.transition-all(@duration:0.2s, @ease:ease-out) 
{
	.transition(all @duration @ease);
}
.transition-duration(@duration: 0.2s) 
{
  -moz-transition-duration:    @duration;
  -webkit-transition-duration: @duration;
  transition-duration:         @duration;
}
.transition-timing-function(@function: ease-out)
{
  -moz-transition-timing-function:    @function;
  -webkit-transition-timing-function: @function;
  transition-timing-function:         @function;
}
.transition-delay(@delay: .6s)
{
  -webkit-transition-delay: @delay;
  -moz-transition-delay: @delay;
  transition-delay: @delay;
}
.backface-visibility(@value: visible)
{
  -webkit-backface-visibility: @value;
  -moz-backface-visibility: @value;
  -ms-backface-visibility: @value;
  backface-visibility: @value;
}

// 
// flex-box
//
.display-box()
{
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: box;
}
.box-orient(@direction: vertical)
{
  -webkit-box-orient: @direction;
  -moz-box-orient: @direction;
  -ms-box-orient: @direction;
  box-orient: @direction;
}
.box-pack(@alignment: center)
{
  // start|end|center|justify
  -webkit-box-pack: @alignment;
  -moz-box-pack: @alignment;
  -ms-box-pack: @alignment;
  box-pack: @alignment;
}
.box-align(@alignment: center)
{
  -webkit-box-align: @alignment;
  -moz-box-align: @alignment;
  -ms-box-align: @alignment;
  box-align: @alignment;
}


// 
// controls appearance of user selection 
//
.user-select(@value)
{
  -webkit-user-select:      @value;
  -moz-user-select:         @value;
  -ms-user-select:          @value;
  user-select:              @value;
}
.text-user-select(@select) // DEPRECATED; use .user-select() instead
{
  -webkit-user-select:      @select;
  -moz-user-select:         @select;
  -ms-user-select:          @select;
  user-select:              @select;
}
//
// control text-inflating algorithm
//
.text-size-adjust(@value)
{
  -webkit-text-size-adjust: @value;
  -moz-text-size-adjust:    @value;
  -ms-text-size-adjust:     @value;
}
// convenience mixin for both user-select and text-size-adjust
.text-no-user-select()
{
  .user-select(none);
  .text-size-adjust(none);
}


//
// make the element's words break in mid-word when a word is too long to fit, and (if possible) add hyphens
//
.word-break()
{
 -ms-word-break: break-all;
     word-break: break-all;
     word-break: break-word; // non-standard value, for Webkit
 -webkit-hyphens: auto;
    -moz-hyphens: auto;
	 -ms-hyphens: auto;
         hyphens: auto;
}

